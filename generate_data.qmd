---
title: "Generate CASM QA Workshop Data"
format: html
editor: visual
---

```{r}
library(dplyr)
library(tidyr)

expit = function(x){
  term1 = exp(x)
  term1/(1+term1)
}

logit = function(x){
  log(x/(1-x))
}

set.seed(412)
```

Tables:

-   Patient

    -   Date of Birth

    -   Gender

-   Encounter

-   Death

-   Medications

```{r}
N = 1000

subject_id = 1:N



# 
# Define their age at first encounter
age_first_enc = rnorm(N, mean=50, sd=10)

# Randomly choose first encounter as days since 1/1/2020, ending at 1/1/2023
date_first_enc = runif(N, 0, 3)

# Then define DOB based on that
dob = date_first_enc - age_first_enc



sex = rbinom(N, 1, .5)

pts = bind_cols(
  subject_id=subject_id,
  dob=dob,
  sex=sex,
  age_first_enc=age_first_enc
)
```

Now for each patient, simulate 1 or more encounters

```{r}
n_encounters = rpois(N, 1) + 1
hist(n_encounters)

encounters = bind_cols(subject_id=rep(subject_id, n_encounters))
# Years between encounters
encounters$time_to_next_encounter = rexp(nrow(encounters), 1/3)

encounters = encounters %>%
  inner_join(pts, by="subject_id") %>%
  group_by(subject_id) %>%
  mutate(age=age_first_enc+cumsum(time_to_next_encounter)) %>%
  ungroup()  %>%
  mutate(age_bin=1*(age >= 65))
```

Now for each encounter, simulate whether they had pneumonia.

$$
P(\text{Pna}=1|\text{Age}) = 
\begin{cases}
  0.05, \text{Age} < 65 \\
  0.1, \text{Age} \ge 65
\end{cases}
$$

```{r}
p_pna = rep(0.1, nrow(encounters))
p_pna[encounters$age_bin == 1] = 0.1
encounters$pna = rbinom(nrow(encounters), 1, p_pna)
mean(encounters$pna)
```

Antibiotics.

$$
\text{logit}P(\text{Abx}|\text{Age}, \text{Pna}) = \alpha_0 + \alpha_1 (\text{Age} \ge 65) + \alpha_2 \text{Pna} + \alpha_3(\text{Age} \ge 65)\times \text{Pna}
$$

```{r}
alpha = c(
  alpha_0 = -1,
alpha_1 = 0.05,
alpha_2 = 1.5,
alpha_3 = 0.5
)


p_abx = expit(with(encounters, cbind(1, age_bin, pna, pna*age_bin) %*% alpha))

hist(p_abx)

encounters$abx = rbinom(nrow(encounters), 1, p_abx)


encounters %>%
  group_by(pna) %>%
  summarize(mean(abx))
```

For each encounter, simulate whether they died within 30 days. Do this separately for pneumonia versus no pneumonia.

$$
\text{logit}P(\text{Death}=1|\text{Age}, \text{Sex}, \text{Pna}=z) = \beta_{z0} + \beta_{z1} (\text{Age}\ge 65) + \beta_{z2}\text{Sex}
$$

```{r}
beta0 = c(
  beta_0=-3,
  beta_2 = 1,
  beta_3= .1
)

beta1 = c(
  beta_0=-2.5,
  beta_2 = 2,
  beta_3= 0
)

design_examples = matrix(ncol=2, byrow=TRUE,
                         data=c(0, 0,
                                1, 0,
                                0, 1,
                                1, 1))
design_examples = cbind(1, design_examples)

expit(design_examples %*% beta0)
expit(design_examples %*% beta1)

p_mortality = rep(NA, nrow(encounters))
p_mortality[encounters$pna == 0] = with(encounters[encounters$pna == 0,] ,
                                        expit(cbind(1, age_bin, sex) %*% beta1)
                                        )
p_mortality[encounters$pna == 1] = with(encounters[encounters$pna == 1,] ,
                                        expit(cbind(1, age_bin, sex) %*% beta1)
                                        )

encounters$death = rbinom(nrow(encounters), 1, p_mortality)
```

```{r}
mean(encounters$death)
```

Now identify deaths and censor encounters from people who previously died.

```{r}
deaths = filter(encounters, death == 1) %>% distinct(subject_id, .keep_all = TRUE) %>%
  mutate(age_at_death=age) %>%
  select(subject_id, dob, age_at_death)

encounters2 = encounters %>%
  left_join(deaths) 

# Keep a small number of post-death encounters as a mistake
post_deaths = bind_rows(
  encounters2 %>%
    filter(pna==0, age > age_at_death) %>%
    sample_n(sample(1:10, 1))
  )

# Filter the others to only be pre-death
encounters2 = filter(encounters2, (is.na(age_at_death)|age <= age_at_death))

# Duplicate some encounters
dups = bind_rows(encounters2 %>%
  filter(pna==0) %>%
  sample_n(sample(100:300, 1)),

  encounters2 %>%
    filter(pna==1) %>%
    sample_n(sample(10:20, 1))
)

nrow(dups)

```

Clean up final dataset

-   Replace numbers with dates

    -   DOB

    -   Age at encounter â€“\> date of encounter

    -   age_at_death -\> Date of death

-   Separate out final tables

    -   pts

    -   encounters

    -   abx

    -   death

```{r}
library(lubridate)
time0 = ymd("2010-01-01")

add_yrs_decimal_to_date = function(time0, y){
  time0 + years(round(y)) + months(round((y %% 1)*12))
}

encounters_final = bind_rows(
  encounters2, post_deaths, dups
  ) %>%
    mutate(dob=add_yrs_decimal_to_date(time0, dob),
         date=add_yrs_decimal_to_date(dob,age)
  ) %>%
  select(subject_id, date, dob, sex, pna, abx, death) %>%
  arrange(date, subject_id)

encounters_final$encounter_id = 1:nrow(encounters_final)



pts_final = encounters_final %>%
  select(subject_id, sex, dob) %>%
  distinct(.keep_all = TRUE) 

deaths_final = mutate(deaths, dod=add_yrs_decimal_to_date(time0, dob+age_at_death)+days(sample(0:30, 1))) %>%
  select(subject_id, dod)

medications = filter(encounters_final, abx==1) %>%
  select(encounter_id, abx)

encounters_final = encounters_final %>%
  select(encounter_id, subject_id, date, pna)
```

```{r}
head(deaths_final)
```

```{r}
write.csv(encounters_final, file = "./data/encounter.csv", row.names = FALSE)
write.csv(pts_final, file = "./data/patient.csv", row.names = FALSE)
write.csv(deaths_final, file = "./data/death.csv", row.names = FALSE)
write.csv(medications, file = "./data/medication.csv", row.names = FALSE)
```
